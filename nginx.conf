worker_processes  auto;


pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}
http {

    default_type  application/octet-stream;

    # 详细日志格式，包含请求和响应信息
    log_format  detailed  '[$time_local] $remote_addr "$request" '
                          'Status:$status RequestSize:$request_length ResponseSize:$body_bytes_sent '
                          'RequestTime:${request_time}s '
                          'RequestHeaders: Authorization:"$http_authorization" ContentType:"$content_type" '
                          'RequestBody: $request_body '
                          'ResponseHeaders: ContentType:"$sent_http_content_type" CORS:"$sent_http_access_control_allow_origin" '
                          'UserAgent:"$http_user_agent"';
    
    # 简化的主日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'request_body:$request_body';



    lua_need_request_body on;

    server {
        listen 1819;
        
        # 启用详细日志记录
        access_log /dev/stdout detailed;
        error_log /dev/stderr debug;



        # 支持 /v1/models 接口
        location /v1/models {
            # 详细日志记录
            access_by_lua_block {
                ngx.log(ngx.ERR, "=== /v1/models REQUEST START ===")
                ngx.log(ngx.ERR, "Method: " .. ngx.var.request_method)
                ngx.log(ngx.ERR, "URI: " .. ngx.var.request_uri)
                ngx.log(ngx.ERR, "Headers: " .. 
                    "Authorization=" .. (ngx.var.http_authorization or "none") .. " | " ..
                    "Content-Type=" .. (ngx.var.content_type or "none") .. " | " ..
                    "User-Agent=" .. (ngx.var.http_user_agent or "none"))
                ngx.log(ngx.ERR, "=== /v1/models REQUEST END ===")
            }
            
            # CORS 配置
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            # 处理 OPTIONS 预检请求
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # 代理转发到目标API
            proxy_pass https://api.deepbricks.ai/v1/models;
            proxy_set_header Host api.deepbricks.ai;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_ssl_server_name on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_read_timeout 300s;
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
        }

        # 为聊天接口也添加CORS支持
        location /v1/chat/completions {
            # CORS 配置
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            # 处理 OPTIONS 预检请求
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # 支持流式传输
            proxy_cache off;
            
            # 使用Lua脚本在请求阶段修改请求体并记录详细日志
            access_by_lua_block {
                ngx.log(ngx.ERR, "=== /v1/chat/completions REQUEST START ===")
                ngx.log(ngx.ERR, "Method: " .. ngx.var.request_method)
                ngx.log(ngx.ERR, "URI: " .. ngx.var.request_uri)
                ngx.log(ngx.ERR, "Headers: " .. 
                    "Authorization=" .. (ngx.var.http_authorization or "none") .. " | " ..
                    "Content-Type=" .. (ngx.var.content_type or "none") .. " | " ..
                    "User-Agent=" .. (ngx.var.http_user_agent or "none"))
                
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if data then
                    ngx.log(ngx.ERR, "Original Request Body: " .. data)
                    -- 替换模型名
                    local new_data = string.gsub(data, '"claude%-sonnet%-4%-20250514"', '"claude-sonnet-4"')
                    if new_data ~= data then
                        ngx.log(ngx.ERR, "Model name replaced: claude-sonnet-4-20250514 -> claude-sonnet-4")
                        ngx.log(ngx.ERR, "Modified Request Body: " .. new_data)
                    end
                    ngx.req.set_body_data(new_data)
                else
                    ngx.log(ngx.ERR, "No request body found")
                end
                ngx.log(ngx.ERR, "=== /v1/chat/completions REQUEST END ===")
            }
            
            # 直接代理到目标API，保持流式传输
            proxy_pass https://api.deepbricks.ai/v1/chat/completions;
            proxy_set_header Host api.deepbricks.ai;
            proxy_set_header Content-Type "application/json";
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_ssl_server_name on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # 流式传输关键配置
            proxy_read_timeout 300s;
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            
            # 禁用响应缓冲以支持流式传输
            proxy_buffering off;
            proxy_request_buffering off;
        }

    }
}